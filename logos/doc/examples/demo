'message { format pop } def
'keycallbacks empty def
'key {
  dup 2 shaft 1 dupn 2 shaft
  "%s %s" format keycallbacks swap { exec pop pop } { swap "Unhandled key: %s %s\n" message } lookup } def
'bind-key { keycallbacks 2 shaft insert 'keycallbacks swap def } def

100 100 window

'components [ [ 'vertexPosition 3 ] [ 'vertexNormal 3 ] [ 'vertexUV 2 ] [ 'vertexColor 4 ] ] def
'vertexColor 0 0 0 0 vcons def
'vertexUV 0 0 0 0 vcons def
'vertexNormal 0 0 0 0 vcons def
'point { 1 vcons [ 1 shaft vertexNormal vertexUV vertexColor ] } def

'rgba { vcons 'vertexColor swap def } def
'rgb { 1 rgba } def

'texpoint { 0 0 vcons 'vertexUV swap def } def

'normal { 0 vcons 'vertexNormal swap def } def

'red { 1 0 0 0.5 rgba } def
'green { 0 1 0 0.5 rgba } def
'blue { 0 0 1 0.5 rgba } def
'white { 1 1 1 rgb } def
'nocolor { 0 0 0 0 rgba } def

'Uniform { dup "set-%s" format swap { {@ dup uniform @} 1 dupn defuniform , {@ @} swap def } def } def

'tileTexture Uniform
'tileTextureNormal Uniform
'lightVect Uniform

'tile "textures/Pebbles_006_COLOR.jpg" image def
'tileNormals "textures/Pebbles_006_NRM.jpg" image def

tile set-tileTexture
tileNormals set-tileTextureNormal
0 0 1 0 vcons set-lightVect

'rgb-triangle
  [ blue 1 0 texpoint 1 0 0 point 
  , red 0 1 texpoint 0 1 0 point
  , green 0 0 texpoint 0 0 0 point ]
  components 'TRIANGLES mesh def
'rgb-square
  [ 0 0 1 normal nocolor 1 0 texpoint 1 0 0 point 
  , 0 1 texpoint 0 1 0 point
  , 0 0 texpoint 0 0 0 point
  , 0 1 texpoint 0 1 0 point
  , 1 0 texpoint 1 0 0 point 
  , 1 1 texpoint 1 1 0 point ]
  components 'TRIANGLES mesh def
'cue
  [ blue 0 0 0 point 1 0 0 point
  , red 0 0 0 point 0 1 0 point
  , green 0 0 0 point 0 0 1 point ]
  components 'LINES mesh def

'modelMat Uniform

identity set-modelMat
'=> { {@ 'modelMat uniform @} swap [ 2 shaft ] } def

'scene [
  10 range {
    'i swap def
    10 range {
      'j swap def
      0.125 0.125 0 0 vcons translation , 0.8 scale ,
      vz vz vx i 0.2 ** 1 -- ** vy j 0.2 ** 1 -- ** ++ ++ normalize rotate ,
      i j 0 0 vcons translate , 0.2 scale => rgb-square 
    } each
  } each
] def

'refresh { [ 1 1 0 0 vcons translation => cue scene ] draw } def

'dxy vx vx 20 ** vy ++ normalize rotation def
'dyx dxy transpose def
'dyz vy vy 20 ** vz ++ normalize rotation def
'dzy dyz transpose def

'view-xy-angle vx def
'view-zy-angle vz def
'view-trans -1 -1 0 0 vcons translation def
'view-scale 1 def
'viewMat Uniform , view-trans set-viewMat

'projMat Uniform
'resize {
  identity swap scale , vz negate translate , vx vy vz vz negate mcons **
  set-projMat } def

'set-camera { view-trans , view-scale scale , vx view-xy-angle rotate , vz view-zy-angle rotate set-viewMat } def

'ctrl false def

"press LEFT" { 'view-xy-angle { dxy ** } modify set-camera refresh } bind-key
"press RIGHT" { 'view-xy-angle { dyx ** } modify set-camera refresh } bind-key
"press UP" { 'view-zy-angle { dyz ** } modify set-camera refresh } bind-key
"press DOWN" { 'view-zy-angle { dzy ** } modify set-camera refresh } bind-key
"press KP_ADD" { 'view-scale  { 1.1 ** } modify set-camera refresh } bind-key
"press KP_SUBTRACT" { 'view-scale  { {@ {@ 1.1 recip @} @} ** } modify set-camera refresh } bind-key

"press ESC" { quit } bind-key
"press Q" { ctrl { quit } { } if } bind-key
"press LCTRL" { 'ctrl true def } bind-key
"release LCTRL" { 'ctrl false def } bind-key

1 resize refresh

'keep-looping false def
'auto-loop { keep-looping { 'LEFT 'press key 'auto-loop $ 40000 delay } { } if } def
'auto-toggle { 'keep-looping { 1 swap - } modify } def

"press L" { auto-toggle auto-loop } bind-key
